// Mocks generated by Mockito 5.2.0 from annotations
// in widget_test_practice/test/clean_architecture/sample_01/mocks/generated.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;
import 'dart:typed_data' as _i6;

import 'package:dio/dio.dart' as _i2;
import 'package:dio/src/options.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:widget_test_practice/clean_architecture/sample_01/core/either.dart'
    as _i3;
import 'package:widget_test_practice/clean_architecture/sample_01/core/error/failure.dart'
    as _i10;
import 'package:widget_test_practice/clean_architecture/sample_01/features/users/data/data_sources/remote/user_remote_data_source.dart'
    as _i7;
import 'package:widget_test_practice/clean_architecture/sample_01/features/users/domain/repositories/user_repository.dart'
    as _i9;
import 'package:widget_test_practice/clean_architecture/sample_01/shared/data/models/user_model.dart'
    as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeResponseBody_0 extends _i1.Fake implements _i2.ResponseBody {}

class _FakeEither_1<E, S> extends _i1.Fake implements _i3.Either<E, S> {}

/// A class which mocks [HttpClientAdapter].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpClientAdapter extends _i1.Mock implements _i2.HttpClientAdapter {
  MockHttpClientAdapter() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.ResponseBody> fetch(
          _i5.RequestOptions? options,
          _i4.Stream<_i6.Uint8List>? requestStream,
          _i4.Future<dynamic>? cancelFuture) =>
      (super.noSuchMethod(
              Invocation.method(#fetch, [options, requestStream, cancelFuture]),
              returnValue:
                  Future<_i2.ResponseBody>.value(_FakeResponseBody_0()))
          as _i4.Future<_i2.ResponseBody>);
  @override
  void close({bool? force = false}) =>
      super.noSuchMethod(Invocation.method(#close, [], {#force: force}),
          returnValueForMissingStub: null);
}

/// A class which mocks [UserRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserRemoteDataSource extends _i1.Mock
    implements _i7.UserRemoteDataSource {
  MockUserRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i8.UserModel>> fetchUsers() =>
      (super.noSuchMethod(Invocation.method(#fetchUsers, []),
              returnValue: Future<List<_i8.UserModel>>.value(<_i8.UserModel>[]))
          as _i4.Future<List<_i8.UserModel>>);
}

/// A class which mocks [UserRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserRepository extends _i1.Mock implements _i9.UserRepository {
  MockUserRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i3.Either<_i10.Failure<String>, List<_i8.UserModel>>>
      getUsers() => (super.noSuchMethod(Invocation.method(#getUsers, []),
              returnValue: Future<
                      _i3.Either<_i10.Failure<String>,
                          List<_i8.UserModel>>>.value(
                  _FakeEither_1<_i10.Failure<String>, List<_i8.UserModel>>()))
          as _i4.Future<_i3.Either<_i10.Failure<String>, List<_i8.UserModel>>>);
}
